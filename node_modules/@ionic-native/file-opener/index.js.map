{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/file-opener/index.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EAAE,UAAU,EAAE,MAAM,eAAe;OACnC,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,oBAAoB;AAEpD;;;;;;;;;;;;;;;;;;GAkBG;AASH;IAAA;IA6CA,CAAC;IA3CC;;;;;OAKG;IAMH,yBAAI,GAAJ,UAAK,QAAgB,EAAE,YAAoB,IAAiB,MAAM,CAAC,CAAC,CAAC;IAErE;;;;OAIG;IAMH,8BAAS,GAAT,UAAU,SAAiB,IAAiB,MAAM,CAAC,CAAC,CAAC;IAErD;;;;OAIG;IAMH,mCAAc,GAAd,UAAe,SAAiB,IAAiB,MAAM,CAAC,CAAC,CAAC;IAErD,qBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,yBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IApCA;QAAC,OAAO,CAAC;YACP,aAAa,EAAE,QAAQ;YACvB,WAAW,EAAE,SAAS;YACtB,SAAS,EAAE,OAAO;SACnB,CAAC;;;;0CAAA;IAQF;QAAC,OAAO,CAAC;YACP,aAAa,EAAE,QAAQ;YACvB,WAAW,EAAE,SAAS;YACtB,SAAS,EAAE,OAAO;SACnB,CAAC;;;;+CAAA;IAQF;QAAC,OAAO,CAAC;YACP,aAAa,EAAE,QAAQ;YACvB,WAAW,EAAE,SAAS;YACtB,SAAS,EAAE,OAAO;SACnB,CAAC;;;;oDAAA;IA5CJ;QAAC,MAAM,CAAC;YACN,UAAU,EAAE,YAAY;YACxB,MAAM,EAAE,6BAA6B;YACrC,SAAS,EAAE,6BAA6B;YACxC,IAAI,EAAE,sDAAsD;YAC5D,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,iBAAiB,CAAC;SAC5D,CAAC;;kBAAA;IA+CF,iBAAC;AAAD,CAAC,AA7CD,IA6CC","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Plugin, Cordova } from '@ionic-native/core';\r\n\r\n/**\r\n * @name File Opener\r\n * @description\r\n * This plugin will open a file on your device file system with its default application.\r\n *\r\n * @usage\r\n * ```\r\n * import { FileOpener } from '@ionic-native/file-opener';\r\n *\r\n * constructor(private fileOpener: FileOpener) { }\r\n *\r\n * ...\r\n *\r\n * this.fileOpener.open('path/to/file.pdf', 'application/pdf')\r\n *   .then(() => console.log('File is opened'))\r\n *   .catch(e => console.log('Error openening file', e));\r\n *\r\n * ```\r\n */\r\n@Plugin({\r\n  pluginName: 'FileOpener',\r\n  plugin: 'cordova-plugin-file-opener2',\r\n  pluginRef: 'cordova.plugins.fileOpener2',\r\n  repo: 'https://github.com/pwlin/cordova-plugin-file-opener2',\r\n  platforms: ['Android', 'iOS', 'Windows', 'Windows Phone 8']\r\n})\r\n\r\nexport class FileOpener {\r\n\r\n  /**\r\n   * Open an file\r\n   * @param filePath {string} File Path\r\n   * @param fileMIMEType {string} File MIME Type\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    callbackStyle: 'object',\r\n    successName: 'success',\r\n    errorName: 'error'\r\n  })\r\n  open(filePath: string, fileMIMEType: string): Promise<any> {return; }\r\n\r\n  /**\r\n   * Uninstalls a package\r\n   * @param packageId {string}  Package ID\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    callbackStyle: 'object',\r\n    successName: 'success',\r\n    errorName: 'error'\r\n  })\r\n  uninstall(packageId: string): Promise<any> {return; }\r\n\r\n  /**\r\n   * Check if an app is already installed\r\n   * @param packageId {string} Package ID\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    callbackStyle: 'object',\r\n    successName: 'success',\r\n    errorName: 'error'\r\n  })\r\n  appIsInstalled(packageId: string): Promise<any> {return; }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}